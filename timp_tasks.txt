### session_service:

Регистрация пользователей;
Авторизация пользователей;
Назначение прав доступа и ролей;
В нем содержится вся основная информация:
  - email;
  - phone;
  - role (student, teacher, dean);
  - full_name;
  - admission_year;
  - course;
  - direction;
  - group;
  - student_number;
  - hostel;

### gradebook - электронная зачетка и ведомость

Учет всех зачетов и экзаменов: в период сессии формировать электронные
ведомости и предоставлять интерфейс для выставления оценок;
Предоставлять интерфейс для просмотра студентом всех своих оценок;

По поводу выставления оценок: необходимо предусмотреть возможность
комментирования оценок не только преподавателем, но и студентом, т.е.
Если студент не согласен с оценкой, то он может в электронной зачетке
отметить, что с этой оценкой не согласен, чтобы сотрудник деканата
мог в своем личном кабинете видеть конфликты оценок.

Роли:
  - студент
  - преподаватель
  - заведующий кафедрой
  - сотрудник деканата
  - декан

Данные:
  - Дисциплины, закрепленные преподаватели
  - Ведомости
  - оценки

За каждой дисциплиной назначается преподаватель

Предусмотреть права доступа
Студент может только смотреть и обжаловать
Преподаватель по дисциплине может редактировать оценки (только до утверждения их деканатом)
Заведующий кафедрой может смотреть оценки и замечания
сотрудник деканата может переназначать ответственного
Сотрудник деканата может регистрировать оценку как допуск и заполнять

Студент может получать доступ к электронной зачетке (просмотр всех дисциплин)
Любой преподаватель может просматривать электронную зачетку любого студента

Необходимо предоставить удобные интерфейсы для фильтрации данных:
  - долги
  - годовые долги
  - информация по сессии

### student_submissions - обращение студентов

(ticket system)

Какие могут быть обращения:
  - Заказ допуска
  - Заказ справки
  - Вопрос как к поддержке (Хочу оформить академ, выплату)
  - Вопрос по конфликту с преподавателем
  - Отчисление
  - Те обращения, которых есть приоритет важности
  
  
Студенты могут оставлять заявки, отслеживать их статус:
  (отправлена, просмотрена, в работе, выполнена, конфликт)

Сотрудник деканата может просматривать заявки, вести обсуждение по заявке
(например, студент отправил заявку на академ, но не приложил скан заявления
 сотрудник деканата пишет ему об этом)

Менять статус заявок

Необходимо предусмотреть архив заявок 


Для всех сервисов: необходимо вести логгирование всех событий чтобы, например,
можно было отследить, кто изменил оценку студента, когда, почему и т п.

По поводу организации работы и выбора технологий:

Вы можете в рамках микро-сервиса выбирать любые технологии
(любой ЯП, любой фреймворк, любую БД)
Но:
- интерфейсы должны быть стандартизированы (общение между сервисами через JSON)
- Приложения должны работать в вебе, то есть должен быть фронтенд
- Стиль офрмления должен быть +- одинаковый
- Разработка ведется только через git (github) (оценка будет ставиться по коду)
- Необходимо вести доску задач (trello), чтобы можно было отслеживать работу
- Можно пользоваться Miro - доска визуализации (mind Map)
- Доделать проект, то есть он не должен быть мертвым

